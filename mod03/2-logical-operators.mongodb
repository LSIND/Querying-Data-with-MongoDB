// Модуль 3. Операторы запросов
// ЛОГИЧЕСКИЕ ОПЕРАТОРЫ

// Коллекция sample_training.zips

use('sample_training')
// 1. Найти все документы, где население не является граничным (очень малым или очень большим) значением. 
// Считаем, что очень маленькое население - до 5000 человек, очень большое – более 1000000 (11193)
q = { $and: [ 
    { pop: {"$lt": 1000000 }}, 
    { pop: {"$gt": 5000 }} ]
    }

// 2. Найти все документы, описывающие штат NY с населением более 10000 человек (489).
q = { $and: [ 
    { state: "NY"}, 
    { pop: {"$gt": 10000}} ]
    }

// 3. Найти все документы, относящиеся к штату LA, где население от 1000 до 5000 человек. 
// Вывести только zip-коды и город. Упорядочить по убыванию населения (167)
q = { $and: [ 
     { pop : { $gt :  1000, $lt : 5000}},
     { state: "LA"} ]
}
p = { city: 1, zip: 1, _id: 0}
s = { pop: -1 }

// 4. Найти все документы, описывающие любой штат, кроме AL, NY. Вывести только zip-коды и штат (27307).
q = {$nor: [{state: "AL"}, {state: "NY"}]}
p = { city: 1, zip: 1, _id: 0}


// 5. Найти все документы, не относящиеся к штатам WY и NY с населением менее 900 человек (7028).	
q = { $and: [ 
     { state: {$nin: ["WY","NY"]}},
     { pop : {  $lt : 900} }
]
}

// Запросы для проверки
//db.zips.find(q)
//db.zips.find(q,p).sort(s)
db.zips.find(q).count()


// ------------------------- //

// Коллекция sample_training.companies
use('sample_training')

// 1. Найти все документы о компаниях, которые были основаны в 2004 году с кодом категории (category_code) либо social, либо web (81).
q = { $and: [ 
     { founded_year: 2004 },
     { category_code : {$in: ["web", "social"]} }
]
}

// 2. Найти все документы о компаниях, которые были основаны либо в 2004, либо в 2005 годах с кодом категории social или web (196).
q = { $and: [ 
     { founded_year: {$in: [2004, 2005] }},
     { category_code : {$in: ["web", "social"]} }
]
}

// 3. Найти все документы о компаниях, количество сотрудников которых больше, чем числовое значение года основания компании. 
// Выведите только имя компании, год основания и количество сотрудников
// Отсортируйте по количеству сотрудников по убыванию (84).

q = { $and: [ 
    { founded_year: {$ne: null } },
 { $expr: { $gt: [ "$number_of_employees" , "$founded_year" ] } }
]
}
p = { name: 1, number_of_employees: 1, founded_year: 1, _id: 0}
s = { number_of_employees: 1 }

// 4. Найти все документы о компаниях, у которых значения полей permalink и twitter_username не совпадают. 
// Исключите документы, где permalink или twitter_username отсутствуют. 
// Не учитывайте регистр
// Отсортируйте по permalink в алфавитном порядке (2536).
q = { $and: [ 
    { permalink: {$ne: null } },
    { twitter_username: {$nin: [null, ""] } },
 { $expr: { $ne: [ "$permalink" , "$twitter_username" ] } }
]
}
p = { name: 1, permalink: 1, twitter_username: 1, founded_year: 1, _id: 0}
c =  {locale: "en_US", strength: 2}
s = { permalink: 1 }

// 5. Найти все компании, которые были основаны в 4-м квартале 2004 года. 
// Отсортируйте по месяцу по возрастанию (40).
q = { $and: [ 
    { founded_year: 2004 },
    { founded_month: {$in: [10,11,12] } }
]
}
p = { name: 1, founded_month: 1, founded_year: 1, _id: 0}
s = { founded_month: 1 }

// Запросы для проверки
db.companies.explain().find(q,p).sort(s)
//db.companies.find(q,p).sort(s).collation(c)
//db.companies.find(q).count()


// ------------------------- //
// Коллекция sample_training.routes
use('sample_training')

// 1. Найти все документы с информацией о маршруте, где самолет 73W сделал хотя бы одну остановку (3).
q = { $and: [ 
    { airplane: "73W" },
    { stops: {$gt: 0 } }
] }

// 2. Найти все документы с информацией о маршруте, где аэропорт вылета и аэропорт назначения равны (1).
q =  { $expr: { $eq: [ "$src_airport" , "$dst_airport" ] } }

// Запросы для проверки
//db.routes.find(q)
db.routes.find(q).count()